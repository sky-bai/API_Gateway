// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin "API_Gateway/api/internal/handler/admin"
	app "API_Gateway/api/internal/handler/app"
	httpProxy "API_Gateway/api/internal/handler/httpProxy"
	httpsProxy "API_Gateway/api/internal/handler/httpsProxy"
	serviceGrpc "API_Gateway/api/internal/handler/serviceGrpc"
	serviceHttp "API_Gateway/api/internal/handler/serviceHttp"
	serviceInfo "API_Gateway/api/internal/handler/serviceInfo"
	serviceTcp "API_Gateway/api/internal/handler/serviceTcp"
	"API_Gateway/api/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/admin/ping",
				Handler: admin.PingHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/login",
				Handler: admin.AdminLoginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/admin/change_pwd",
				Handler: admin.AdminChangePwdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/logout",
				Handler: admin.AdminLogOutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/admin_info",
				Handler: admin.AdminInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/service/service_list",
				Handler: serviceInfo.ServiceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/service/service_delete",
				Handler: serviceInfo.ServiceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/service/service_detail",
				Handler: serviceInfo.ServiceDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/service/service_status",
				Handler: serviceInfo.ServiceStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/service/panel_data",
				Handler: serviceInfo.PanelDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/service/service_flow",
				Handler: serviceInfo.ServiceFlowHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/service/panel_service_status",
				Handler: serviceInfo.PanelServiceStatusHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/service/add_tcp",
				Handler: serviceTcp.AddTcpHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/service/update_tcp",
				Handler: serviceTcp.UpdateTcpHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.ParamCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/service/add_http",
					Handler: serviceHttp.AddHttpHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/service/update_http",
					Handler: serviceHttp.UpdateHttpHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/service/add_grpc",
				Handler: serviceGrpc.AddGrpcHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/service/update_grpc",
				Handler: serviceGrpc.UpdateGrpcHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.HTTPFlowCount, serverCtx.HTTPFlowLimit, serverCtx.HTTPJwtToken, serverCtx.HTTPJwtFlowCount, serverCtx.HTTP_Jwt_Flow_Limit, serverCtx.HTTPWhiteList, serverCtx.HTTPBlackList, serverCtx.HeaderTransfer, serverCtx.StripUrl, serverCtx.UrlRewrite, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/ping",
					Handler: httpProxy.HttpProxyPingHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/timeout",
					Handler: httpProxy.HttpProxyTimeoutHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.HeaderTransfer, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/header_transfer",
					Handler: httpProxy.HttpProxyHeaderTransferHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.StripUrl, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/strip_uri/abc",
					Handler: httpProxy.HttpProxyHeaderStripUriHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.UrlRewrite, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/url_rewrite",
					Handler: httpProxy.HttpProxyUrlRewriteHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.HTTPWhiteList, serverCtx.HTTPBlackList, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/white_list",
					Handler: httpProxy.HttpProxyWhiteListHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.HTTPFlowCount, serverCtx.HTTPFlowLimit, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/flow_count",
					Handler: httpProxy.HttpProxyFlowCountHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.HTTPAccessMode, serverCtx.HTTPJwtToken, serverCtx.HTTPJwtFlowCount, serverCtx.HTTP_Jwt_Flow_Limit, serverCtx.HTTPReverseProxy},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/http_proxy/jwt_token",
					Handler: httpProxy.HttpProxyJwtTokenHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/https_proxy/ping",
				Handler: httpsProxy.HttpsProxyPingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/app/add_app",
				Handler: app.AddAppHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/app/update_app",
				Handler: app.UpdateAppHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/app/app_delete",
				Handler: app.DeleteAppHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/app/app_detail",
				Handler: app.AppDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/app/app_list",
				Handler: app.AppListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/app/app_status",
				Handler: app.AppStatusHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AppToken},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/app/get_token",
					Handler: app.GetTokenHandler(serverCtx),
				},
			}...,
		),
	)
}
