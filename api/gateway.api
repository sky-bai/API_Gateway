syntax = "v1"

info(
	title: "type title here"
	desc: "type desc here"
	author: "type author here"
	email: "type email here"
	version: "type version here"
)

import (
	"tcp.api"
	"http.api"
	"grpc.api"
	"http_proxy.api"
	"https_proxy.api"
	"app.api"
)

// 登陆请求
type LoginRequest {
	UserName string `json:"username"  comment:"管理员用户名"  validate:"required"` //管理员用户名
	Password string `json:"password"  validate:"required"`
}
// 登陆Reponse
type LoginReponse {
	AccessToken  string `json:"accessToken"`
	AccessExpire int64  `json:"accessExpire"`
	RefreshAfter int64  `json:"refreshAfter"`
}

// 退出登陆Reponse
type LogOutReponse {
	Message string `json:"message" form:"message"  validate:"required"` // 退出信息
}

// 获取用户信息
type AdminInfoReponse {
	ID           int      `json:"id"`
	Name         string   `json:"name"`
	LoginTime    int      `json:"login_time"`
	Avatar       string   `json:"avatar"`
	Introduction string   `json:"introduction"`
	Roles        []string `json:"roles"`
}

type FixPwdRequest {
	Password string `json:"password" form:"password" comment:"密码" example:"123456" validate:"required"` //密码
}

type FixPwdReponse {
	Msg string `json:"msg"`
}

type CommonReponse {
	Msg string `json:"msg"`
}
@server(
	group: admin
)
service gateway-api {
	@handler ping
	get /admin/ping returns (LogOutReponse)
	
	@handler adminLogin
	post /admin/login (LoginRequest) returns (LoginReponse);
}

@server(
	jwt: Auth
	group: admin
)
service gateway-api {
	@handler adminChangePwd
	post /admin/change_pwd (FixPwdRequest) returns (FixPwdReponse);
	
	@handler adminLogOut
	get /admin/logout returns (LogOutReponse);
	
	@handler adminInfo
	get /admin/admin_info returns (AdminInfoReponse);
}

// 获取服务列表Request
type ServiceListResquest {
	Info     string `json:"info"`
	PageNo   int    `json:"page_no"`   //页数
	PageSize int    `json:"page_size"` //每页条数
}

// 获取服务列表Response
type ServiceListItemReponse {
	ID          int64  `json:"id"`           //id
	ServiceName string `json:"service_name"` //服务名称
	ServiceDesc string `json:"service_desc"` //服务描述
	LoadType    int    `json:"load_type"`    //类型
	ServiceAddr string `json:"service_addr"` //服务地址
	Qps         int64  `json:"qps"`          //qps
	Qpd         int64  `json:"qpd"`          //qpd
	TotalNode   int    `json:"total_node"`   //节点数
}
type DataList {
	Page  int         `json:"page"`
	Limit int         `json:"limit"`
	Count int         `json:"count"`
	Total int         `json:"total"`
	List  interface{} `json:"list"`
}

// 获取信息列表
type PageListReponse {
	Page      int         `json:"page"`
	Limit     int         `json:"limit"`
	Count     int         `json:"count"`
	TotalPage int         `json:"total_page"`
	Data      interface{} `json:"data"`
}

type ServiceResquest {
	ID int64 `json:"id"` // 服务id
}
type ServiceDetailResquest {
	ID int `json:"id"` // 服务id
}
type ServiceStatusResquest {
	ID int `json:"id"` // 服务id
}

// 获取该服务信息Response
type ServiceDetailResponse {
	ServiceName string `json:"service_name" validate:"required,valid_service_name"` //服务名
	ServiceDesc string `json:"service_desc" validate:"required,max=255,min=1"`      //服务描述

	RuleType       int    `json:"rule_type" validate:"max=1,min=0"`                  //接入类型
	Rule           string `json:"rule"  validate:"required,valid_rule"`              //域名或者前缀
	NeedHttps      int    `json:"need_https" validate:"max=1,min=0"`                 //支持https
	NeedStripUri   int    `json:"need_strip_uri"  example:"" validate:"max=1,min=0"` //启用strip_uri
	NeedWebsocket  int    `json:"need_websocket"  example:"" validate:"max=1,min=0"` //是否支持websocket
	UrlRewrite     string `json:"url_rewrite"  validate:"valid_url_rewrite"`         //url重写功能
	HeaderTransfor string `json:"header_transfor"  validate:"valid_header_transfor"` //header转换

	OpenAuth          int    `json:"open_auth"   validate:"max=1,min=0"`    //关键词
	BlackList         string `json:"black_list"  validate:""`               //黑名单ip
	WhiteList         string `json:"white_list"   validate:""`              //白名单ip
	ClientipFlowLimit int    `json:"clientip_flow_limit"  validate:"min=0"` //客户端ip限流
	ServiceFlowLimit  int    `json:"service_flow_limit"  validate:"min=0"`  //服务端限流

	RoundType              int    `json:"round_type"  validate:"max=3,min=0"`                //轮询方式
	IpList                 string `json:"ip_list" validate:"required,valid_ipportlist"`      //ip列表
	WeightList             string `json:"weight_list"  validate:"required,valid_weightlist"` //权重列表
	UpstreamConnectTimeout int    `json:"upstream_connect_timeout" validate:"min=0"`         //建立连接超时, 单位s
	UpstreamHeaderTimeout  int    `json:"upstream_header_timeout"  validate:"min=0"`         //获取header超时, 单位s
	UpstreamIdleTimeout    int    `json:"upstream_idle_timeout"  validate:"min=0"`           //链接最大空闲时间, 单位s
	UpstreamMaxIdle        int    `json:"upstream_max_idle"  validate:"min=0"`               //最大空闲链接数
}

type ServiceStatusResponse {
	Today     []int `json:"today"`
	Yesterday []int `json:"yesterday"`
}

type PanelDataOutput {
	ServiceNum      int64 `json:"serviceNum"`
	AppNum          int64 `json:"appNum"`
	CurrentQPS      int64 `json:"currentQps"`
	TodayRequestNum int64 `json:"todayRequestNum"`
}
type ServiceFlowResponse {
	Today     []int `json:"today"`
	Yesterday []int `json:"yesterday"`
}

type PanelServiceStatusResponse {
	Legend []string              `json:"legend"`
	Data   []DashServiceStatItem `json:"data"`
}
type DashServiceStatItem {
	Name     string `json:"name"`
	LoadType int    `json:"load_type"`
	Value    int64  `json:"value"`
}

@server(
	group: serviceInfo
)
service gateway-api {
	@handler serviceList
	post /service/service_list (ServiceListResquest) returns (ServiceListItemReponse);
	
	@handler serviceDelete
	post /service/service_delete (ServiceResquest) returns (CommonReponse);
	
	@handler serviceDetail
	post /service/service_detail (ServiceDetailResquest) returns (ServiceDetail);
	// 单个服务流量统计
	@handler serviceStatus
	post /service/service_status (ServiceStatusResquest) returns (ServiceStatusResponse);
	
	// 大盘数据统计
	@handler panelData
	get /service/panel_data  returns (PanelDataOutput);
	
	// ServiceFlow 大盘流量统计
	@handler serviceFlow
	get /service/service_flow  returns (ServiceFlowResponse);
	
	// 大盘服务详情
	@handler panelServiceStatus
	get /service/panel_service_status  returns (PanelServiceStatusResponse);
}

type ServiceDetail {
	Info          GatewayServiceInfo          `json:"info" description:"基本信息"`
	HTTPRule      GatewayServiceHttpRule      `json:"http_rule" description:"http_rule"`
	TCPRule       GatewayServiceTcpRule       `json:"tcp_rule" description:"tcp_rule"`
	GRPCRule      GatewayServiceGrpcRule      `json:"grpc_rule" description:"grpc_rule"`
	LoadBalance   GatewayServiceLoadBalance   `json:"load_balance" description:"load_balance"`
	AccessControl GatewayServiceAccessControl `json:"access_control" description:"access_control"`
}

type GatewayServiceInfo {
	Id          int64  `db:"id" json:"id"`                      // 自增主键
	LoadType    int64  `db:"load_type" json:"load_type"`        // 负载类型 0=http 1=tcp 2=grpc
	ServiceName string `db:"service_name" json:"service_name"`  // 服务名称 6-128 数字字母下划线
	ServiceDesc string `db:"service_desc" json:"service_descs"` // 服务描述
	IsDelete    int64  `db:"is_delete" json:"is_delete"`        // 是否删除 1=删除 0=未删除
}

type GatewayServiceHttpRule {
	Id             int64  `db:"id" json:"id"`                           // 自增主键
	ServiceId      int64  `db:"service_id" json:"service_id"`           // 服务id
	RuleType       int64  `db:"rule_type" json:"rule_type"`             // 匹配类型 0=url前缀url_prefix 1=域名domain
	Rule           string `db:"rule" json:"rule"`                       // type=domain表示域名，type=url_prefix时表示url前缀
	NeedHttps      int64  `db:"need_https" json:"need_https"`           // 支持https 1=支持
	NeedStripUri   int64  `db:"need_strip_uri" json:"need_strip_uri"`   // 启用strip_uri 1=启用
	NeedWebsocket  int64  `db:"need_websocket" json:"need_websocket"`   // 是否支持websocket 1=支持
	UrlRewrite     string `db:"url_rewrite" json:"url_rewrite"`         // url重写功能 格式：^/gatekeeper/test_service(.*) $1 多个逗号间隔
	HeaderTransfor string `db:"header_transfor" json:"header_transfor"` // header转换支持增加(add)、删除(del)、修改(edit) 格式: add headname headvalue 多个逗号间隔
}

type GatewayServiceTcpRule {
	Id        int64 `db:"id" json:"id"`                 // 自增主键
	ServiceId int64 `db:"service_id" json:"service_id"` // 服务id
	Port      int64 `db:"port" json:"port"`             // 端口号
}
type GatewayServiceGrpcRule {
	Id             int64  `db:"id" json:"id"`                           // 自增主键
	ServiceId      int64  `db:"service_id" json:"service_id"`           // 服务id
	Port           int64  `db:"port" json:"port"`                       // 端口
	HeaderTransfor string `db:"header_transfor" json:"header_transfor"` // header转换支持增加(add)、删除(del)、修改(edit) 格式: add headname headvalue 多个逗号间隔
}
type GatewayServiceLoadBalance {
	Id                     int64  `db:"id" json:"id"`                                             // 自增主键
	ServiceId              int64  `db:"service_id" json:"service_id"`                             // 服务id
	CheckMethod            int64  `db:"check_method" json:"check_method"`                         // 检查方法 0=tcpchk,检测端口是否握手成功
	CheckTimeout           int64  `db:"check_timeout" json:"check_timeout"`                       // check超时时间,单位s
	CheckInterval          int64  `db:"check_interval" json:"check_interval"`                     // 检查间隔, 单位s
	RoundType              int64  `db:"round_type" json:"round_type"`                             // 轮询方式 0=random 1=round-robin 2=weight_round-robin 3=ip_hash
	IpList                 string `db:"ip_list" json:"ip_list"`                                   // ip列表
	WeightList             string `db:"weight_list" json:"weight_list"`                           // 权重列表
	ForbidList             string `db:"forbid_list" json:"forbid_list"`                           // 禁用ip列表
	UpstreamConnectTimeout int64  `db:"upstream_connect_timeout" json:"upstream_connect_timeout"` // 建立连接超时, 单位s
	UpstreamHeaderTimeout  int64  `db:"upstream_header_timeout" json:"upstream_header_timeout"`   // 获取header超时, 单位s
	UpstreamIdleTimeout    int64  `db:"upstream_idle_timeout" json:"upstream_idle_timeout"`       // 链接最大空闲时间, 单位s
	UpstreamMaxIdle        int64  `db:"upstream_max_idle" json:"upstream_max_idle"`               // 最大空闲链接数
}

type GatewayServiceAccessControl {
	Id                int64  `db:"id" json:"id"`                                   // 自增主键
	ServiceId         int64  `db:"service_id" json:"service_id"`                   // 服务id
	OpenAuth          int64  `db:"open_auth" json:"open_auth"`                     // 是否开启权限 1=开启
	BlackList         string `db:"black_list" json:"black_list"`                   // 黑名单ip
	WhiteList         string `db:"white_list" json:"white_list"`                   // 白名单ip
	WhiteHostName     string `db:"white_host_name" json:"white_host_name"`         // 白名单主机
	ClientipFlowLimit int64  `db:"clientip_flow_limit" json:"clientip_flow_limit"` // 客户端ip限流
	ServiceFlowLimit  int64  `db:"service_flow_limit" json:"service_flow_limit"`   // 服务端限流
}